const fs = require('fs').promises;
const path = require('path');
const { createCanvas, loadImage, registerFont } = require('canvas');
const Country = require('../models/country');

class ImageService {
  static async generateSummaryImage() {
    try {
      // Get top 5 countries by GDP
      const topCountries = await Country.getTopCountriesByGDP(5);
      const systemStatus = await Country.getSystemStatus();
      
      // Create canvas
      const width = 800;
      const height = 600;
      const canvas = createCanvas(width, height);
      const ctx = canvas.getContext('2d');
      
      // Set background
      ctx.fillStyle = '#f8f9fa';
      ctx.fillRect(0, 0, width, height);
      
      // Add header
      ctx.fillStyle = '#2c3e50';
      ctx.font = 'bold 32px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Country Currency Exchange Summary', width / 2, 50);
      
      // Add total countries count
      ctx.font = '20px Arial';
      ctx.fillStyle = '#34495e';
      ctx.fillText(`Total Countries: ${systemStatus.total_countries}`, width / 2, 90);
      
      // Add last refresh timestamp
      if (systemStatus.last_refreshed_at) {
        const refreshDate = new Date(systemStatus.last_refreshed_at).toLocaleString();
        ctx.fillText(`Last Refresh: ${refreshDate}`, width / 2, 120);
      }
      
      // Add top countries section
      ctx.font = 'bold 24px Arial';
      ctx.fillStyle = '#2c3e50';
      ctx.fillText('Top 5 Countries by Estimated GDP', width / 2, 170);
      
      // Display top countries
      let yPos = 210;
      ctx.font = '18px Arial';
      ctx.textAlign = 'left';
      
      for (let i = 0; i < topCountries.length; i++) {
        const country = topCountries[i];
        const rank = i + 1;
        
        // Rank
        ctx.fillStyle = '#3498db';
        ctx.fillText(`${rank}.`, 100, yPos);
        
        // Country name
        ctx.fillStyle = '#2c3e50';
        ctx.fillText(country.name, 140, yPos);
        
        // GDP (formatted)
        const gdpFormatted = country.estimated_gdp 
          ? `$${country.estimated_gdp.toLocaleString('en-US', { maximumFractionDigits: 2 })}`
          : 'N/A';
        ctx.fillText(gdpFormatted, 400, yPos);
        
        // Currency code
        if (country.currency_code) {
          ctx.fillStyle = '#7f8c8d';
          ctx.fillText(`(${country.currency_code})`, 620, yPos);
        }
        
        yPos += 35;
      }
      
      // Add footer
      ctx.font = '14px Arial';
      ctx.fillStyle = '#95a5a6';
      ctx.textAlign = 'center';
      ctx.fillText('Generated by Currency Exchange API', width / 2, height - 30);
      
      // Ensure cache directory exists
      const cacheDir = process.env.IMAGE_PATH || './cache';
      await fs.mkdir(cacheDir, { recursive: true });
      
      // Save image
      const imagePath = path.join(cacheDir, process.env.IMAGE_NAME || 'summary.png');
      const buffer = canvas.toBuffer('image/png');
      await fs.writeFile(imagePath, buffer);
      
      console.log(`Summary image generated at: ${imagePath}`);
      return imagePath;
    } catch (error) {
      console.error('Error generating summary image:', error);
      throw new Error(`Failed to generate summary image: ${error.message}`);
    }
  }
  
  static async imageExists() {
    try {
      const cacheDir = process.env.IMAGE_PATH || './cache';
      const imagePath = path.join(cacheDir, process.env.IMAGE_NAME || 'summary.png');
      await fs.access(imagePath);
      return imagePath;
    } catch (error) {
      return null;
    }
  }
}

module.exports = ImageService;